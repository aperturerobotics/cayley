// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.6.1
// source: github.com/cayleygraph/cayley/quad/pquads/quads.proto

package pquads

import (
	base64 "encoding/base64"
	binary "encoding/binary"
	fmt "fmt"
	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	io "io"
	math "math"
	strconv "strconv"
	strings "strings"
)

// Copyright 2015 The Cayley Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Quad is in internal representation of quad used by Cayley.
type Quad struct {
	unknownFields  []byte
	Subject        string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Predicate      string `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Object         string `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Label          string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	SubjectValue   *Value `protobuf:"bytes,5,opt,name=subject_value,json=subjectValue,proto3" json:"subjectValue,omitempty"`
	PredicateValue *Value `protobuf:"bytes,6,opt,name=predicate_value,json=predicateValue,proto3" json:"predicateValue,omitempty"`
	ObjectValue    *Value `protobuf:"bytes,7,opt,name=object_value,json=objectValue,proto3" json:"objectValue,omitempty"`
	LabelValue     *Value `protobuf:"bytes,8,opt,name=label_value,json=labelValue,proto3" json:"labelValue,omitempty"`
}

func (x *Quad) Reset() {
	*x = Quad{}
}

func (*Quad) ProtoMessage() {}

func (x *Quad) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Quad) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *Quad) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *Quad) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Quad) GetSubjectValue() *Value {
	if x != nil {
		return x.SubjectValue
	}
	return nil
}

func (x *Quad) GetPredicateValue() *Value {
	if x != nil {
		return x.PredicateValue
	}
	return nil
}

func (x *Quad) GetObjectValue() *Value {
	if x != nil {
		return x.ObjectValue
	}
	return nil
}

func (x *Quad) GetLabelValue() *Value {
	if x != nil {
		return x.LabelValue
	}
	return nil
}

// WireQuad is a quad that allows any value for it's directions.
type WireQuad struct {
	unknownFields []byte
	Subject       *Value `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Predicate     *Value `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Object        *Value `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Label         *Value `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *WireQuad) Reset() {
	*x = WireQuad{}
}

func (*WireQuad) ProtoMessage() {}

func (x *WireQuad) GetSubject() *Value {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *WireQuad) GetPredicate() *Value {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *WireQuad) GetObject() *Value {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *WireQuad) GetLabel() *Value {
	if x != nil {
		return x.Label
	}
	return nil
}

// WireQuadRaw is the same as WireQuad, but doesn't decode underlying values.
type WireQuadRaw struct {
	unknownFields []byte
	Subject       []byte `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Predicate     []byte `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Object        []byte `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Label         []byte `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *WireQuadRaw) Reset() {
	*x = WireQuadRaw{}
}

func (*WireQuadRaw) ProtoMessage() {}

func (x *WireQuadRaw) GetSubject() []byte {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *WireQuadRaw) GetPredicate() []byte {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *WireQuadRaw) GetObject() []byte {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *WireQuadRaw) GetLabel() []byte {
	if x != nil {
		return x.Label
	}
	return nil
}

// StrictQuad is a quad as described by RDF spec.
type StrictQuad struct {
	unknownFields []byte
	Subject       *StrictQuad_Ref `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Predicate     *StrictQuad_Ref `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Object        *Value          `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Label         *StrictQuad_Ref `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *StrictQuad) Reset() {
	*x = StrictQuad{}
}

func (*StrictQuad) ProtoMessage() {}

func (x *StrictQuad) GetSubject() *StrictQuad_Ref {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *StrictQuad) GetPredicate() *StrictQuad_Ref {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *StrictQuad) GetObject() *Value {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *StrictQuad) GetLabel() *StrictQuad_Ref {
	if x != nil {
		return x.Label
	}
	return nil
}

// StrictQuadRaw is the same as StrictQuad, but doesn't decode underlying values.
type StrictQuadRaw struct {
	unknownFields []byte
	Subject       []byte `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Predicate     []byte `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Object        []byte `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Label         []byte `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *StrictQuadRaw) Reset() {
	*x = StrictQuadRaw{}
}

func (*StrictQuadRaw) ProtoMessage() {}

func (x *StrictQuadRaw) GetSubject() []byte {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *StrictQuadRaw) GetPredicate() []byte {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *StrictQuadRaw) GetObject() []byte {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *StrictQuadRaw) GetLabel() []byte {
	if x != nil {
		return x.Label
	}
	return nil
}

type Value struct {
	unknownFields []byte
	// Types that are assignable to Value:
	//
	//	*Value_Raw
	//	*Value_Str
	//	*Value_Iri
	//	*Value_Bnode
	//	*Value_TypedStr
	//	*Value_LangStr
	//	*Value_Int
	//	*Value_Float
	//	*Value_Boolean
	//	*Value_Time
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
}

func (*Value) ProtoMessage() {}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetRaw() []byte {
	if x, ok := x.GetValue().(*Value_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Value) GetStr() string {
	if x, ok := x.GetValue().(*Value_Str); ok {
		return x.Str
	}
	return ""
}

func (x *Value) GetIri() string {
	if x, ok := x.GetValue().(*Value_Iri); ok {
		return x.Iri
	}
	return ""
}

func (x *Value) GetBnode() string {
	if x, ok := x.GetValue().(*Value_Bnode); ok {
		return x.Bnode
	}
	return ""
}

func (x *Value) GetTypedStr() *Value_TypedString {
	if x, ok := x.GetValue().(*Value_TypedStr); ok {
		return x.TypedStr
	}
	return nil
}

func (x *Value) GetLangStr() *Value_LangString {
	if x, ok := x.GetValue().(*Value_LangStr); ok {
		return x.LangStr
	}
	return nil
}

func (x *Value) GetInt() int64 {
	if x, ok := x.GetValue().(*Value_Int); ok {
		return x.Int
	}
	return 0
}

func (x *Value) GetFloat() float64 {
	if x, ok := x.GetValue().(*Value_Float); ok {
		return x.Float
	}
	return 0
}

func (x *Value) GetBoolean() bool {
	if x, ok := x.GetValue().(*Value_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *Value) GetTime() *Value_Timestamp {
	if x, ok := x.GetValue().(*Value_Time); ok {
		return x.Time
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_Raw struct {
	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3,oneof"`
}

type Value_Str struct {
	Str string `protobuf:"bytes,2,opt,name=str,proto3,oneof"`
}

type Value_Iri struct {
	Iri string `protobuf:"bytes,3,opt,name=iri,proto3,oneof"`
}

type Value_Bnode struct {
	Bnode string `protobuf:"bytes,4,opt,name=bnode,proto3,oneof"`
}

type Value_TypedStr struct {
	TypedStr *Value_TypedString `protobuf:"bytes,5,opt,name=typed_str,json=typedStr,proto3,oneof"`
}

type Value_LangStr struct {
	LangStr *Value_LangString `protobuf:"bytes,6,opt,name=lang_str,json=langStr,proto3,oneof"`
}

type Value_Int struct {
	Int int64 `protobuf:"varint,7,opt,name=int,proto3,oneof"`
}

type Value_Float struct {
	Float float64 `protobuf:"fixed64,8,opt,name=float,proto3,oneof"`
}

type Value_Boolean struct {
	Boolean bool `protobuf:"varint,9,opt,name=boolean,proto3,oneof"`
}

type Value_Time struct {
	Time *Value_Timestamp `protobuf:"bytes,10,opt,name=time,proto3,oneof"`
}

func (*Value_Raw) isValue_Value() {}

func (*Value_Str) isValue_Value() {}

func (*Value_Iri) isValue_Value() {}

func (*Value_Bnode) isValue_Value() {}

func (*Value_TypedStr) isValue_Value() {}

func (*Value_LangStr) isValue_Value() {}

func (*Value_Int) isValue_Value() {}

func (*Value_Float) isValue_Value() {}

func (*Value_Boolean) isValue_Value() {}

func (*Value_Time) isValue_Value() {}

type Header struct {
	unknownFields []byte
	// Full is set if encoder always writes every quad directions instead of
	// skipping duplicated values on each direction (except label) for subsequent quads.
	Full bool `protobuf:"varint,1,opt,name=full,proto3" json:"full,omitempty"`
	// NotStrict is set if encoder emits WireQuad instead of StrictQuad messages.
	NotStrict bool `protobuf:"varint,2,opt,name=not_strict,json=notStrict,proto3" json:"notStrict,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
}

func (*Header) ProtoMessage() {}

func (x *Header) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *Header) GetNotStrict() bool {
	if x != nil {
		return x.NotStrict
	}
	return false
}

type StrictQuad_Ref struct {
	unknownFields []byte
	// Types that are assignable to Value:
	//
	//	*StrictQuad_Ref_BnodeLabel
	//	*StrictQuad_Ref_Iri
	Value isStrictQuad_Ref_Value `protobuf_oneof:"value"`
}

func (x *StrictQuad_Ref) Reset() {
	*x = StrictQuad_Ref{}
}

func (*StrictQuad_Ref) ProtoMessage() {}

func (m *StrictQuad_Ref) GetValue() isStrictQuad_Ref_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *StrictQuad_Ref) GetBnodeLabel() string {
	if x, ok := x.GetValue().(*StrictQuad_Ref_BnodeLabel); ok {
		return x.BnodeLabel
	}
	return ""
}

func (x *StrictQuad_Ref) GetIri() string {
	if x, ok := x.GetValue().(*StrictQuad_Ref_Iri); ok {
		return x.Iri
	}
	return ""
}

type isStrictQuad_Ref_Value interface {
	isStrictQuad_Ref_Value()
}

type StrictQuad_Ref_BnodeLabel struct {
	BnodeLabel string `protobuf:"bytes,2,opt,name=bnode_label,json=bnodeLabel,proto3,oneof"`
}

type StrictQuad_Ref_Iri struct {
	Iri string `protobuf:"bytes,3,opt,name=iri,proto3,oneof"`
}

func (*StrictQuad_Ref_BnodeLabel) isStrictQuad_Ref_Value() {}

func (*StrictQuad_Ref_Iri) isStrictQuad_Ref_Value() {}

type Value_TypedString struct {
	unknownFields []byte
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type          string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Value_TypedString) Reset() {
	*x = Value_TypedString{}
}

func (*Value_TypedString) ProtoMessage() {}

func (x *Value_TypedString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Value_TypedString) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Value_LangString struct {
	unknownFields []byte
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Lang          string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *Value_LangString) Reset() {
	*x = Value_LangString{}
}

func (*Value_LangString) ProtoMessage() {}

func (x *Value_LangString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Value_LangString) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

// From https://github.com/golang/protobuf/blob/master/ptypes/timestamp/timestamp.proto
type Value_Timestamp struct {
	unknownFields []byte
	Seconds       int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos         int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Value_Timestamp) Reset() {
	*x = Value_Timestamp{}
}

func (*Value_Timestamp) ProtoMessage() {}

func (x *Value_Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Value_Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

func (m *Quad) CloneVT() *Quad {
	if m == nil {
		return (*Quad)(nil)
	}
	r := new(Quad)
	r.Subject = m.Subject
	r.Predicate = m.Predicate
	r.Object = m.Object
	r.Label = m.Label
	r.SubjectValue = m.SubjectValue.CloneVT()
	r.PredicateValue = m.PredicateValue.CloneVT()
	r.ObjectValue = m.ObjectValue.CloneVT()
	r.LabelValue = m.LabelValue.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Quad) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *WireQuad) CloneVT() *WireQuad {
	if m == nil {
		return (*WireQuad)(nil)
	}
	r := new(WireQuad)
	r.Subject = m.Subject.CloneVT()
	r.Predicate = m.Predicate.CloneVT()
	r.Object = m.Object.CloneVT()
	r.Label = m.Label.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *WireQuad) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *WireQuadRaw) CloneVT() *WireQuadRaw {
	if m == nil {
		return (*WireQuadRaw)(nil)
	}
	r := new(WireQuadRaw)
	if rhs := m.Subject; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Subject = tmpBytes
	}
	if rhs := m.Predicate; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Predicate = tmpBytes
	}
	if rhs := m.Object; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Object = tmpBytes
	}
	if rhs := m.Label; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Label = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *WireQuadRaw) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StrictQuad_Ref) CloneVT() *StrictQuad_Ref {
	if m == nil {
		return (*StrictQuad_Ref)(nil)
	}
	r := new(StrictQuad_Ref)
	if m.Value != nil {
		r.Value = m.Value.(interface{ CloneOneofVT() isStrictQuad_Ref_Value }).CloneOneofVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StrictQuad_Ref) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StrictQuad_Ref_BnodeLabel) CloneVT() *StrictQuad_Ref_BnodeLabel {
	if m == nil {
		return (*StrictQuad_Ref_BnodeLabel)(nil)
	}
	r := new(StrictQuad_Ref_BnodeLabel)
	r.BnodeLabel = m.BnodeLabel
	return r
}

func (m *StrictQuad_Ref_BnodeLabel) CloneOneofVT() isStrictQuad_Ref_Value {
	return m.CloneVT()
}

func (m *StrictQuad_Ref_Iri) CloneVT() *StrictQuad_Ref_Iri {
	if m == nil {
		return (*StrictQuad_Ref_Iri)(nil)
	}
	r := new(StrictQuad_Ref_Iri)
	r.Iri = m.Iri
	return r
}

func (m *StrictQuad_Ref_Iri) CloneOneofVT() isStrictQuad_Ref_Value {
	return m.CloneVT()
}

func (m *StrictQuad) CloneVT() *StrictQuad {
	if m == nil {
		return (*StrictQuad)(nil)
	}
	r := new(StrictQuad)
	r.Subject = m.Subject.CloneVT()
	r.Predicate = m.Predicate.CloneVT()
	r.Object = m.Object.CloneVT()
	r.Label = m.Label.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StrictQuad) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StrictQuadRaw) CloneVT() *StrictQuadRaw {
	if m == nil {
		return (*StrictQuadRaw)(nil)
	}
	r := new(StrictQuadRaw)
	if rhs := m.Subject; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Subject = tmpBytes
	}
	if rhs := m.Predicate; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Predicate = tmpBytes
	}
	if rhs := m.Object; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Object = tmpBytes
	}
	if rhs := m.Label; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Label = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StrictQuadRaw) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Value_TypedString) CloneVT() *Value_TypedString {
	if m == nil {
		return (*Value_TypedString)(nil)
	}
	r := new(Value_TypedString)
	r.Value = m.Value
	r.Type = m.Type
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Value_TypedString) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Value_LangString) CloneVT() *Value_LangString {
	if m == nil {
		return (*Value_LangString)(nil)
	}
	r := new(Value_LangString)
	r.Value = m.Value
	r.Lang = m.Lang
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Value_LangString) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Value_Timestamp) CloneVT() *Value_Timestamp {
	if m == nil {
		return (*Value_Timestamp)(nil)
	}
	r := new(Value_Timestamp)
	r.Seconds = m.Seconds
	r.Nanos = m.Nanos
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Value_Timestamp) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Value) CloneVT() *Value {
	if m == nil {
		return (*Value)(nil)
	}
	r := new(Value)
	if m.Value != nil {
		r.Value = m.Value.(interface{ CloneOneofVT() isValue_Value }).CloneOneofVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Value) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Value_Raw) CloneVT() *Value_Raw {
	if m == nil {
		return (*Value_Raw)(nil)
	}
	r := new(Value_Raw)
	if rhs := m.Raw; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Raw = tmpBytes
	}
	return r
}

func (m *Value_Raw) CloneOneofVT() isValue_Value {
	return m.CloneVT()
}

func (m *Value_Str) CloneVT() *Value_Str {
	if m == nil {
		return (*Value_Str)(nil)
	}
	r := new(Value_Str)
	r.Str = m.Str
	return r
}

func (m *Value_Str) CloneOneofVT() isValue_Value {
	return m.CloneVT()
}

func (m *Value_Iri) CloneVT() *Value_Iri {
	if m == nil {
		return (*Value_Iri)(nil)
	}
	r := new(Value_Iri)
	r.Iri = m.Iri
	return r
}

func (m *Value_Iri) CloneOneofVT() isValue_Value {
	return m.CloneVT()
}

func (m *Value_Bnode) CloneVT() *Value_Bnode {
	if m == nil {
		return (*Value_Bnode)(nil)
	}
	r := new(Value_Bnode)
	r.Bnode = m.Bnode
	return r
}

func (m *Value_Bnode) CloneOneofVT() isValue_Value {
	return m.CloneVT()
}

func (m *Value_TypedStr) CloneVT() *Value_TypedStr {
	if m == nil {
		return (*Value_TypedStr)(nil)
	}
	r := new(Value_TypedStr)
	r.TypedStr = m.TypedStr.CloneVT()
	return r
}

func (m *Value_TypedStr) CloneOneofVT() isValue_Value {
	return m.CloneVT()
}

func (m *Value_LangStr) CloneVT() *Value_LangStr {
	if m == nil {
		return (*Value_LangStr)(nil)
	}
	r := new(Value_LangStr)
	r.LangStr = m.LangStr.CloneVT()
	return r
}

func (m *Value_LangStr) CloneOneofVT() isValue_Value {
	return m.CloneVT()
}

func (m *Value_Int) CloneVT() *Value_Int {
	if m == nil {
		return (*Value_Int)(nil)
	}
	r := new(Value_Int)
	r.Int = m.Int
	return r
}

func (m *Value_Int) CloneOneofVT() isValue_Value {
	return m.CloneVT()
}

func (m *Value_Float) CloneVT() *Value_Float {
	if m == nil {
		return (*Value_Float)(nil)
	}
	r := new(Value_Float)
	r.Float = m.Float
	return r
}

func (m *Value_Float) CloneOneofVT() isValue_Value {
	return m.CloneVT()
}

func (m *Value_Boolean) CloneVT() *Value_Boolean {
	if m == nil {
		return (*Value_Boolean)(nil)
	}
	r := new(Value_Boolean)
	r.Boolean = m.Boolean
	return r
}

func (m *Value_Boolean) CloneOneofVT() isValue_Value {
	return m.CloneVT()
}

func (m *Value_Time) CloneVT() *Value_Time {
	if m == nil {
		return (*Value_Time)(nil)
	}
	r := new(Value_Time)
	r.Time = m.Time.CloneVT()
	return r
}

func (m *Value_Time) CloneOneofVT() isValue_Value {
	return m.CloneVT()
}

func (m *Header) CloneVT() *Header {
	if m == nil {
		return (*Header)(nil)
	}
	r := new(Header)
	r.Full = m.Full
	r.NotStrict = m.NotStrict
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Header) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Quad) EqualVT(that *Quad) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Subject != that.Subject {
		return false
	}
	if this.Predicate != that.Predicate {
		return false
	}
	if this.Object != that.Object {
		return false
	}
	if this.Label != that.Label {
		return false
	}
	if !this.SubjectValue.EqualVT(that.SubjectValue) {
		return false
	}
	if !this.PredicateValue.EqualVT(that.PredicateValue) {
		return false
	}
	if !this.ObjectValue.EqualVT(that.ObjectValue) {
		return false
	}
	if !this.LabelValue.EqualVT(that.LabelValue) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Quad) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Quad)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *WireQuad) EqualVT(that *WireQuad) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Subject.EqualVT(that.Subject) {
		return false
	}
	if !this.Predicate.EqualVT(that.Predicate) {
		return false
	}
	if !this.Object.EqualVT(that.Object) {
		return false
	}
	if !this.Label.EqualVT(that.Label) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *WireQuad) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*WireQuad)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *WireQuadRaw) EqualVT(that *WireQuadRaw) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if string(this.Subject) != string(that.Subject) {
		return false
	}
	if string(this.Predicate) != string(that.Predicate) {
		return false
	}
	if string(this.Object) != string(that.Object) {
		return false
	}
	if string(this.Label) != string(that.Label) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *WireQuadRaw) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*WireQuadRaw)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StrictQuad_Ref) EqualVT(that *StrictQuad_Ref) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Value == nil && that.Value != nil {
		return false
	} else if this.Value != nil {
		if that.Value == nil {
			return false
		}
		if !this.Value.(interface {
			EqualVT(isStrictQuad_Ref_Value) bool
		}).EqualVT(that.Value) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StrictQuad_Ref) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StrictQuad_Ref)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StrictQuad_Ref_BnodeLabel) EqualVT(thatIface isStrictQuad_Ref_Value) bool {
	that, ok := thatIface.(*StrictQuad_Ref_BnodeLabel)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.BnodeLabel != that.BnodeLabel {
		return false
	}
	return true
}

func (this *StrictQuad_Ref_Iri) EqualVT(thatIface isStrictQuad_Ref_Value) bool {
	that, ok := thatIface.(*StrictQuad_Ref_Iri)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Iri != that.Iri {
		return false
	}
	return true
}

func (this *StrictQuad) EqualVT(that *StrictQuad) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Subject.EqualVT(that.Subject) {
		return false
	}
	if !this.Predicate.EqualVT(that.Predicate) {
		return false
	}
	if !this.Object.EqualVT(that.Object) {
		return false
	}
	if !this.Label.EqualVT(that.Label) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StrictQuad) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StrictQuad)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StrictQuadRaw) EqualVT(that *StrictQuadRaw) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if string(this.Subject) != string(that.Subject) {
		return false
	}
	if string(this.Predicate) != string(that.Predicate) {
		return false
	}
	if string(this.Object) != string(that.Object) {
		return false
	}
	if string(this.Label) != string(that.Label) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StrictQuadRaw) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StrictQuadRaw)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Value_TypedString) EqualVT(that *Value_TypedString) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Value != that.Value {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Value_TypedString) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Value_TypedString)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Value_LangString) EqualVT(that *Value_LangString) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Value != that.Value {
		return false
	}
	if this.Lang != that.Lang {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Value_LangString) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Value_LangString)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Value_Timestamp) EqualVT(that *Value_Timestamp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Seconds != that.Seconds {
		return false
	}
	if this.Nanos != that.Nanos {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Value_Timestamp) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Value_Timestamp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Value) EqualVT(that *Value) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Value == nil && that.Value != nil {
		return false
	} else if this.Value != nil {
		if that.Value == nil {
			return false
		}
		if !this.Value.(interface{ EqualVT(isValue_Value) bool }).EqualVT(that.Value) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Value) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Value)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Value_Raw) EqualVT(thatIface isValue_Value) bool {
	that, ok := thatIface.(*Value_Raw)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if string(this.Raw) != string(that.Raw) {
		return false
	}
	return true
}

func (this *Value_Str) EqualVT(thatIface isValue_Value) bool {
	that, ok := thatIface.(*Value_Str)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Str != that.Str {
		return false
	}
	return true
}

func (this *Value_Iri) EqualVT(thatIface isValue_Value) bool {
	that, ok := thatIface.(*Value_Iri)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Iri != that.Iri {
		return false
	}
	return true
}

func (this *Value_Bnode) EqualVT(thatIface isValue_Value) bool {
	that, ok := thatIface.(*Value_Bnode)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Bnode != that.Bnode {
		return false
	}
	return true
}

func (this *Value_TypedStr) EqualVT(thatIface isValue_Value) bool {
	that, ok := thatIface.(*Value_TypedStr)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TypedStr, that.TypedStr; p != q {
		if p == nil {
			p = &Value_TypedString{}
		}
		if q == nil {
			q = &Value_TypedString{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Value_LangStr) EqualVT(thatIface isValue_Value) bool {
	that, ok := thatIface.(*Value_LangStr)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.LangStr, that.LangStr; p != q {
		if p == nil {
			p = &Value_LangString{}
		}
		if q == nil {
			q = &Value_LangString{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Value_Int) EqualVT(thatIface isValue_Value) bool {
	that, ok := thatIface.(*Value_Int)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Int != that.Int {
		return false
	}
	return true
}

func (this *Value_Float) EqualVT(thatIface isValue_Value) bool {
	that, ok := thatIface.(*Value_Float)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Float != that.Float {
		return false
	}
	return true
}

func (this *Value_Boolean) EqualVT(thatIface isValue_Value) bool {
	that, ok := thatIface.(*Value_Boolean)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Boolean != that.Boolean {
		return false
	}
	return true
}

func (this *Value_Time) EqualVT(thatIface isValue_Value) bool {
	that, ok := thatIface.(*Value_Time)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Time, that.Time; p != q {
		if p == nil {
			p = &Value_Timestamp{}
		}
		if q == nil {
			q = &Value_Timestamp{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Header) EqualVT(that *Header) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Full != that.Full {
		return false
	}
	if this.NotStrict != that.NotStrict {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Header) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Header)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the Quad message to JSON.
func (x *Quad) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Subject != "" || s.HasField("subject") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("subject")
		s.WriteString(x.Subject)
	}
	if x.Predicate != "" || s.HasField("predicate") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("predicate")
		s.WriteString(x.Predicate)
	}
	if x.Object != "" || s.HasField("object") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("object")
		s.WriteString(x.Object)
	}
	if x.Label != "" || s.HasField("label") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("label")
		s.WriteString(x.Label)
	}
	if x.SubjectValue != nil || s.HasField("subjectValue") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("subjectValue")
		x.SubjectValue.MarshalProtoJSON(s.WithField("subjectValue"))
	}
	if x.PredicateValue != nil || s.HasField("predicateValue") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("predicateValue")
		x.PredicateValue.MarshalProtoJSON(s.WithField("predicateValue"))
	}
	if x.ObjectValue != nil || s.HasField("objectValue") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("objectValue")
		x.ObjectValue.MarshalProtoJSON(s.WithField("objectValue"))
	}
	if x.LabelValue != nil || s.HasField("labelValue") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("labelValue")
		x.LabelValue.MarshalProtoJSON(s.WithField("labelValue"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Quad to JSON.
func (x *Quad) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Quad message from JSON.
func (x *Quad) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "subject":
			s.AddField("subject")
			x.Subject = s.ReadString()
		case "predicate":
			s.AddField("predicate")
			x.Predicate = s.ReadString()
		case "object":
			s.AddField("object")
			x.Object = s.ReadString()
		case "label":
			s.AddField("label")
			x.Label = s.ReadString()
		case "subject_value", "subjectValue":
			if s.ReadNil() {
				x.SubjectValue = nil
				return
			}
			x.SubjectValue = &Value{}
			x.SubjectValue.UnmarshalProtoJSON(s.WithField("subject_value", true))
		case "predicate_value", "predicateValue":
			if s.ReadNil() {
				x.PredicateValue = nil
				return
			}
			x.PredicateValue = &Value{}
			x.PredicateValue.UnmarshalProtoJSON(s.WithField("predicate_value", true))
		case "object_value", "objectValue":
			if s.ReadNil() {
				x.ObjectValue = nil
				return
			}
			x.ObjectValue = &Value{}
			x.ObjectValue.UnmarshalProtoJSON(s.WithField("object_value", true))
		case "label_value", "labelValue":
			if s.ReadNil() {
				x.LabelValue = nil
				return
			}
			x.LabelValue = &Value{}
			x.LabelValue.UnmarshalProtoJSON(s.WithField("label_value", true))
		}
	})
}

// UnmarshalJSON unmarshals the Quad from JSON.
func (x *Quad) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the WireQuad message to JSON.
func (x *WireQuad) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Subject != nil || s.HasField("subject") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("subject")
		x.Subject.MarshalProtoJSON(s.WithField("subject"))
	}
	if x.Predicate != nil || s.HasField("predicate") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("predicate")
		x.Predicate.MarshalProtoJSON(s.WithField("predicate"))
	}
	if x.Object != nil || s.HasField("object") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("object")
		x.Object.MarshalProtoJSON(s.WithField("object"))
	}
	if x.Label != nil || s.HasField("label") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("label")
		x.Label.MarshalProtoJSON(s.WithField("label"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the WireQuad to JSON.
func (x *WireQuad) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the WireQuad message from JSON.
func (x *WireQuad) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "subject":
			if s.ReadNil() {
				x.Subject = nil
				return
			}
			x.Subject = &Value{}
			x.Subject.UnmarshalProtoJSON(s.WithField("subject", true))
		case "predicate":
			if s.ReadNil() {
				x.Predicate = nil
				return
			}
			x.Predicate = &Value{}
			x.Predicate.UnmarshalProtoJSON(s.WithField("predicate", true))
		case "object":
			if s.ReadNil() {
				x.Object = nil
				return
			}
			x.Object = &Value{}
			x.Object.UnmarshalProtoJSON(s.WithField("object", true))
		case "label":
			if s.ReadNil() {
				x.Label = nil
				return
			}
			x.Label = &Value{}
			x.Label.UnmarshalProtoJSON(s.WithField("label", true))
		}
	})
}

// UnmarshalJSON unmarshals the WireQuad from JSON.
func (x *WireQuad) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the WireQuadRaw message to JSON.
func (x *WireQuadRaw) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Subject) > 0 || s.HasField("subject") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("subject")
		s.WriteBytes(x.Subject)
	}
	if len(x.Predicate) > 0 || s.HasField("predicate") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("predicate")
		s.WriteBytes(x.Predicate)
	}
	if len(x.Object) > 0 || s.HasField("object") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("object")
		s.WriteBytes(x.Object)
	}
	if len(x.Label) > 0 || s.HasField("label") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("label")
		s.WriteBytes(x.Label)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the WireQuadRaw to JSON.
func (x *WireQuadRaw) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the WireQuadRaw message from JSON.
func (x *WireQuadRaw) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "subject":
			s.AddField("subject")
			x.Subject = s.ReadBytes()
		case "predicate":
			s.AddField("predicate")
			x.Predicate = s.ReadBytes()
		case "object":
			s.AddField("object")
			x.Object = s.ReadBytes()
		case "label":
			s.AddField("label")
			x.Label = s.ReadBytes()
		}
	})
}

// UnmarshalJSON unmarshals the WireQuadRaw from JSON.
func (x *WireQuadRaw) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StrictQuad_Ref message to JSON.
func (x *StrictQuad_Ref) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Value != nil {
		switch ov := x.Value.(type) {
		case *StrictQuad_Ref_BnodeLabel:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("bnodeLabel")
			s.WriteString(ov.BnodeLabel)
		case *StrictQuad_Ref_Iri:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("iri")
			s.WriteString(ov.Iri)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StrictQuad_Ref to JSON.
func (x *StrictQuad_Ref) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StrictQuad_Ref message from JSON.
func (x *StrictQuad_Ref) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "bnode_label", "bnodeLabel":
			s.AddField("bnode_label")
			ov := &StrictQuad_Ref_BnodeLabel{}
			x.Value = ov
			ov.BnodeLabel = s.ReadString()
		case "iri":
			s.AddField("iri")
			ov := &StrictQuad_Ref_Iri{}
			x.Value = ov
			ov.Iri = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the StrictQuad_Ref from JSON.
func (x *StrictQuad_Ref) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StrictQuad message to JSON.
func (x *StrictQuad) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Subject != nil || s.HasField("subject") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("subject")
		x.Subject.MarshalProtoJSON(s.WithField("subject"))
	}
	if x.Predicate != nil || s.HasField("predicate") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("predicate")
		x.Predicate.MarshalProtoJSON(s.WithField("predicate"))
	}
	if x.Object != nil || s.HasField("object") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("object")
		x.Object.MarshalProtoJSON(s.WithField("object"))
	}
	if x.Label != nil || s.HasField("label") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("label")
		x.Label.MarshalProtoJSON(s.WithField("label"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StrictQuad to JSON.
func (x *StrictQuad) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StrictQuad message from JSON.
func (x *StrictQuad) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "subject":
			if s.ReadNil() {
				x.Subject = nil
				return
			}
			x.Subject = &StrictQuad_Ref{}
			x.Subject.UnmarshalProtoJSON(s.WithField("subject", true))
		case "predicate":
			if s.ReadNil() {
				x.Predicate = nil
				return
			}
			x.Predicate = &StrictQuad_Ref{}
			x.Predicate.UnmarshalProtoJSON(s.WithField("predicate", true))
		case "object":
			if s.ReadNil() {
				x.Object = nil
				return
			}
			x.Object = &Value{}
			x.Object.UnmarshalProtoJSON(s.WithField("object", true))
		case "label":
			if s.ReadNil() {
				x.Label = nil
				return
			}
			x.Label = &StrictQuad_Ref{}
			x.Label.UnmarshalProtoJSON(s.WithField("label", true))
		}
	})
}

// UnmarshalJSON unmarshals the StrictQuad from JSON.
func (x *StrictQuad) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StrictQuadRaw message to JSON.
func (x *StrictQuadRaw) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Subject) > 0 || s.HasField("subject") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("subject")
		s.WriteBytes(x.Subject)
	}
	if len(x.Predicate) > 0 || s.HasField("predicate") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("predicate")
		s.WriteBytes(x.Predicate)
	}
	if len(x.Object) > 0 || s.HasField("object") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("object")
		s.WriteBytes(x.Object)
	}
	if len(x.Label) > 0 || s.HasField("label") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("label")
		s.WriteBytes(x.Label)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StrictQuadRaw to JSON.
func (x *StrictQuadRaw) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StrictQuadRaw message from JSON.
func (x *StrictQuadRaw) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "subject":
			s.AddField("subject")
			x.Subject = s.ReadBytes()
		case "predicate":
			s.AddField("predicate")
			x.Predicate = s.ReadBytes()
		case "object":
			s.AddField("object")
			x.Object = s.ReadBytes()
		case "label":
			s.AddField("label")
			x.Label = s.ReadBytes()
		}
	})
}

// UnmarshalJSON unmarshals the StrictQuadRaw from JSON.
func (x *StrictQuadRaw) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Value_TypedString message to JSON.
func (x *Value_TypedString) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Value != "" || s.HasField("value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value")
		s.WriteString(x.Value)
	}
	if x.Type != "" || s.HasField("type") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("type")
		s.WriteString(x.Type)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Value_TypedString to JSON.
func (x *Value_TypedString) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Value_TypedString message from JSON.
func (x *Value_TypedString) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "value":
			s.AddField("value")
			x.Value = s.ReadString()
		case "type":
			s.AddField("type")
			x.Type = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the Value_TypedString from JSON.
func (x *Value_TypedString) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Value_LangString message to JSON.
func (x *Value_LangString) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Value != "" || s.HasField("value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value")
		s.WriteString(x.Value)
	}
	if x.Lang != "" || s.HasField("lang") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lang")
		s.WriteString(x.Lang)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Value_LangString to JSON.
func (x *Value_LangString) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Value_LangString message from JSON.
func (x *Value_LangString) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "value":
			s.AddField("value")
			x.Value = s.ReadString()
		case "lang":
			s.AddField("lang")
			x.Lang = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the Value_LangString from JSON.
func (x *Value_LangString) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Value_Timestamp message to JSON.
func (x *Value_Timestamp) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Seconds != 0 || s.HasField("seconds") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("seconds")
		s.WriteInt64(x.Seconds)
	}
	if x.Nanos != 0 || s.HasField("nanos") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("nanos")
		s.WriteInt32(x.Nanos)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Value_Timestamp to JSON.
func (x *Value_Timestamp) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Value_Timestamp message from JSON.
func (x *Value_Timestamp) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "seconds":
			s.AddField("seconds")
			x.Seconds = s.ReadInt64()
		case "nanos":
			s.AddField("nanos")
			x.Nanos = s.ReadInt32()
		}
	})
}

// UnmarshalJSON unmarshals the Value_Timestamp from JSON.
func (x *Value_Timestamp) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Value message to JSON.
func (x *Value) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Value != nil {
		switch ov := x.Value.(type) {
		case *Value_Raw:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("raw")
			s.WriteBytes(ov.Raw)
		case *Value_Str:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("str")
			s.WriteString(ov.Str)
		case *Value_Iri:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("iri")
			s.WriteString(ov.Iri)
		case *Value_Bnode:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("bnode")
			s.WriteString(ov.Bnode)
		case *Value_TypedStr:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("typedStr")
			ov.TypedStr.MarshalProtoJSON(s.WithField("typedStr"))
		case *Value_LangStr:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("langStr")
			ov.LangStr.MarshalProtoJSON(s.WithField("langStr"))
		case *Value_Int:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("int")
			s.WriteInt64(ov.Int)
		case *Value_Float:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("float")
			s.WriteFloat64(ov.Float)
		case *Value_Boolean:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("boolean")
			s.WriteBool(ov.Boolean)
		case *Value_Time:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("time")
			ov.Time.MarshalProtoJSON(s.WithField("time"))
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Value to JSON.
func (x *Value) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Value message from JSON.
func (x *Value) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "raw":
			s.AddField("raw")
			ov := &Value_Raw{}
			x.Value = ov
			ov.Raw = s.ReadBytes()
		case "str":
			s.AddField("str")
			ov := &Value_Str{}
			x.Value = ov
			ov.Str = s.ReadString()
		case "iri":
			s.AddField("iri")
			ov := &Value_Iri{}
			x.Value = ov
			ov.Iri = s.ReadString()
		case "bnode":
			s.AddField("bnode")
			ov := &Value_Bnode{}
			x.Value = ov
			ov.Bnode = s.ReadString()
		case "typed_str", "typedStr":
			ov := &Value_TypedStr{}
			x.Value = ov
			if s.ReadNil() {
				ov.TypedStr = nil
				return
			}
			ov.TypedStr = &Value_TypedString{}
			ov.TypedStr.UnmarshalProtoJSON(s.WithField("typed_str", true))
		case "lang_str", "langStr":
			ov := &Value_LangStr{}
			x.Value = ov
			if s.ReadNil() {
				ov.LangStr = nil
				return
			}
			ov.LangStr = &Value_LangString{}
			ov.LangStr.UnmarshalProtoJSON(s.WithField("lang_str", true))
		case "int":
			s.AddField("int")
			ov := &Value_Int{}
			x.Value = ov
			ov.Int = s.ReadInt64()
		case "float":
			s.AddField("float")
			ov := &Value_Float{}
			x.Value = ov
			ov.Float = s.ReadFloat64()
		case "boolean":
			s.AddField("boolean")
			ov := &Value_Boolean{}
			x.Value = ov
			ov.Boolean = s.ReadBool()
		case "time":
			ov := &Value_Time{}
			x.Value = ov
			if s.ReadNil() {
				ov.Time = nil
				return
			}
			ov.Time = &Value_Timestamp{}
			ov.Time.UnmarshalProtoJSON(s.WithField("time", true))
		}
	})
}

// UnmarshalJSON unmarshals the Value from JSON.
func (x *Value) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Header message to JSON.
func (x *Header) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Full || s.HasField("full") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("full")
		s.WriteBool(x.Full)
	}
	if x.NotStrict || s.HasField("notStrict") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("notStrict")
		s.WriteBool(x.NotStrict)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Header to JSON.
func (x *Header) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Header message from JSON.
func (x *Header) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "full":
			s.AddField("full")
			x.Full = s.ReadBool()
		case "not_strict", "notStrict":
			s.AddField("not_strict")
			x.NotStrict = s.ReadBool()
		}
	})
}

// UnmarshalJSON unmarshals the Header from JSON.
func (x *Header) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Quad) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quad) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Quad) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.LabelValue != nil {
		size, err := m.LabelValue.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x42
	}
	if m.ObjectValue != nil {
		size, err := m.ObjectValue.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3a
	}
	if m.PredicateValue != nil {
		size, err := m.PredicateValue.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	if m.SubjectValue != nil {
		size, err := m.SubjectValue.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Object) > 0 {
		i -= len(m.Object)
		copy(dAtA[i:], m.Object)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Object)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Predicate) > 0 {
		i -= len(m.Predicate)
		copy(dAtA[i:], m.Predicate)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Predicate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WireQuad) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WireQuad) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *WireQuad) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Label != nil {
		size, err := m.Label.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if m.Object != nil {
		size, err := m.Object.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.Predicate != nil {
		size, err := m.Predicate.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.Subject != nil {
		size, err := m.Subject.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WireQuadRaw) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WireQuadRaw) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *WireQuadRaw) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Object) > 0 {
		i -= len(m.Object)
		copy(dAtA[i:], m.Object)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Object)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Predicate) > 0 {
		i -= len(m.Predicate)
		copy(dAtA[i:], m.Predicate)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Predicate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StrictQuad_Ref) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrictQuad_Ref) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StrictQuad_Ref) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.Value.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	return len(dAtA) - i, nil
}

func (m *StrictQuad_Ref_BnodeLabel) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StrictQuad_Ref_BnodeLabel) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.BnodeLabel)
	copy(dAtA[i:], m.BnodeLabel)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.BnodeLabel)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *StrictQuad_Ref_Iri) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StrictQuad_Ref_Iri) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Iri)
	copy(dAtA[i:], m.Iri)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Iri)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *StrictQuad) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrictQuad) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StrictQuad) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Label != nil {
		size, err := m.Label.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if m.Object != nil {
		size, err := m.Object.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.Predicate != nil {
		size, err := m.Predicate.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.Subject != nil {
		size, err := m.Subject.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StrictQuadRaw) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrictQuadRaw) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StrictQuadRaw) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Object) > 0 {
		i -= len(m.Object)
		copy(dAtA[i:], m.Object)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Object)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Predicate) > 0 {
		i -= len(m.Predicate)
		copy(dAtA[i:], m.Predicate)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Predicate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Value_TypedString) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value_TypedString) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_TypedString) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Value_LangString) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value_LangString) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_LangString) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Value_Timestamp) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value_Timestamp) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_Timestamp) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Nanos != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Nanos))
		i--
		dAtA[i] = 0x10
	}
	if m.Seconds != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Seconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Value) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.Value.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	return len(dAtA) - i, nil
}

func (m *Value_Raw) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_Raw) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Raw)
	copy(dAtA[i:], m.Raw)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Raw)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Value_Str) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_Str) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Str)
	copy(dAtA[i:], m.Str)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Str)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *Value_Iri) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_Iri) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Iri)
	copy(dAtA[i:], m.Iri)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Iri)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Value_Bnode) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_Bnode) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Bnode)
	copy(dAtA[i:], m.Bnode)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Bnode)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *Value_TypedStr) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_TypedStr) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TypedStr != nil {
		size, err := m.TypedStr.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	} else {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, 0)
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Value_LangStr) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_LangStr) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LangStr != nil {
		size, err := m.LangStr.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	} else {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, 0)
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Value_Int) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_Int) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Int))
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *Value_Float) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_Float) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float))))
	i--
	dAtA[i] = 0x41
	return len(dAtA) - i, nil
}
func (m *Value_Boolean) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_Boolean) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Boolean {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	return len(dAtA) - i, nil
}
func (m *Value_Time) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value_Time) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Time != nil {
		size, err := m.Time.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x52
	} else {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, 0)
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Header) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Header) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.NotStrict {
		i--
		if m.NotStrict {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Full {
		i--
		if m.Full {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Quad) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Predicate)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Object)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.SubjectValue != nil {
		l = m.SubjectValue.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.PredicateValue != nil {
		l = m.PredicateValue.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ObjectValue != nil {
		l = m.ObjectValue.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.LabelValue != nil {
		l = m.LabelValue.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *WireQuad) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Predicate != nil {
		l = m.Predicate.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Label != nil {
		l = m.Label.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *WireQuadRaw) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Predicate)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Object)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StrictQuad_Ref) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if vtmsg, ok := m.Value.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	n += len(m.unknownFields)
	return n
}

func (m *StrictQuad_Ref_BnodeLabel) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BnodeLabel)
	n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	return n
}
func (m *StrictQuad_Ref_Iri) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Iri)
	n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	return n
}
func (m *StrictQuad) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Predicate != nil {
		l = m.Predicate.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Label != nil {
		l = m.Label.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StrictQuadRaw) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Predicate)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Object)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Value_TypedString) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Value_LangString) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Value_Timestamp) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seconds != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Seconds))
	}
	if m.Nanos != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Nanos))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Value) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if vtmsg, ok := m.Value.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	n += len(m.unknownFields)
	return n
}

func (m *Value_Raw) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Raw)
	n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	return n
}
func (m *Value_Str) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	return n
}
func (m *Value_Iri) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Iri)
	n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	return n
}
func (m *Value_Bnode) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bnode)
	n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	return n
}
func (m *Value_TypedStr) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypedStr != nil {
		l = m.TypedStr.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	} else {
		n += 2
	}
	return n
}
func (m *Value_LangStr) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LangStr != nil {
		l = m.LangStr.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	} else {
		n += 2
	}
	return n
}
func (m *Value_Int) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Int))
	return n
}
func (m *Value_Float) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *Value_Boolean) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Value_Time) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	} else {
		n += 2
	}
	return n
}
func (m *Header) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Full {
		n += 2
	}
	if m.NotStrict {
		n += 2
	}
	n += len(m.unknownFields)
	return n
}

func (x *Quad) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Quad { ")
	if x.Subject != "" {
		sb.WriteString(" subject: ")
		sb.WriteString(strconv.Quote(x.Subject))
	}
	if x.Predicate != "" {
		sb.WriteString(" predicate: ")
		sb.WriteString(strconv.Quote(x.Predicate))
	}
	if x.Object != "" {
		sb.WriteString(" object: ")
		sb.WriteString(strconv.Quote(x.Object))
	}
	if x.Label != "" {
		sb.WriteString(" label: ")
		sb.WriteString(strconv.Quote(x.Label))
	}
	if x.SubjectValue != nil {
		sb.WriteString(" subject_value: ")
		sb.WriteString(x.SubjectValue.MarshalProtoText())
	}
	if x.PredicateValue != nil {
		sb.WriteString(" predicate_value: ")
		sb.WriteString(x.PredicateValue.MarshalProtoText())
	}
	if x.ObjectValue != nil {
		sb.WriteString(" object_value: ")
		sb.WriteString(x.ObjectValue.MarshalProtoText())
	}
	if x.LabelValue != nil {
		sb.WriteString(" label_value: ")
		sb.WriteString(x.LabelValue.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Quad) String() string {
	return x.MarshalProtoText()
}
func (x *WireQuad) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("WireQuad { ")
	if x.Subject != nil {
		sb.WriteString(" subject: ")
		sb.WriteString(x.Subject.MarshalProtoText())
	}
	if x.Predicate != nil {
		sb.WriteString(" predicate: ")
		sb.WriteString(x.Predicate.MarshalProtoText())
	}
	if x.Object != nil {
		sb.WriteString(" object: ")
		sb.WriteString(x.Object.MarshalProtoText())
	}
	if x.Label != nil {
		sb.WriteString(" label: ")
		sb.WriteString(x.Label.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *WireQuad) String() string {
	return x.MarshalProtoText()
}
func (x *WireQuadRaw) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("WireQuadRaw { ")
	if len(x.Subject) > 0 {
		sb.WriteString(" subject: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Subject))
		sb.WriteString("\"")
	}
	if len(x.Predicate) > 0 {
		sb.WriteString(" predicate: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Predicate))
		sb.WriteString("\"")
	}
	if len(x.Object) > 0 {
		sb.WriteString(" object: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Object))
		sb.WriteString("\"")
	}
	if len(x.Label) > 0 {
		sb.WriteString(" label: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Label))
		sb.WriteString("\"")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *WireQuadRaw) String() string {
	return x.MarshalProtoText()
}
func (x *StrictQuad_Ref) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Ref { ")
	switch body := x.Value.(type) {
	case *StrictQuad_Ref_BnodeLabel:
		if body.BnodeLabel != "" {
			sb.WriteString(" bnode_label: ")
			sb.WriteString(strconv.Quote(body.BnodeLabel))
		}
	case *StrictQuad_Ref_Iri:
		if body.Iri != "" {
			sb.WriteString(" iri: ")
			sb.WriteString(strconv.Quote(body.Iri))
		}
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StrictQuad_Ref) String() string {
	return x.MarshalProtoText()
}
func (x *StrictQuad) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StrictQuad { ")
	if x.Subject != nil {
		sb.WriteString(" subject: ")
		sb.WriteString(x.Subject.MarshalProtoText())
	}
	if x.Predicate != nil {
		sb.WriteString(" predicate: ")
		sb.WriteString(x.Predicate.MarshalProtoText())
	}
	if x.Object != nil {
		sb.WriteString(" object: ")
		sb.WriteString(x.Object.MarshalProtoText())
	}
	if x.Label != nil {
		sb.WriteString(" label: ")
		sb.WriteString(x.Label.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StrictQuad) String() string {
	return x.MarshalProtoText()
}
func (x *StrictQuadRaw) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StrictQuadRaw { ")
	if len(x.Subject) > 0 {
		sb.WriteString(" subject: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Subject))
		sb.WriteString("\"")
	}
	if len(x.Predicate) > 0 {
		sb.WriteString(" predicate: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Predicate))
		sb.WriteString("\"")
	}
	if len(x.Object) > 0 {
		sb.WriteString(" object: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Object))
		sb.WriteString("\"")
	}
	if len(x.Label) > 0 {
		sb.WriteString(" label: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Label))
		sb.WriteString("\"")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StrictQuadRaw) String() string {
	return x.MarshalProtoText()
}
func (x *Value_TypedString) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("TypedString { ")
	if x.Value != "" {
		sb.WriteString(" value: ")
		sb.WriteString(strconv.Quote(x.Value))
	}
	if x.Type != "" {
		sb.WriteString(" type: ")
		sb.WriteString(strconv.Quote(x.Type))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Value_TypedString) String() string {
	return x.MarshalProtoText()
}
func (x *Value_LangString) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("LangString { ")
	if x.Value != "" {
		sb.WriteString(" value: ")
		sb.WriteString(strconv.Quote(x.Value))
	}
	if x.Lang != "" {
		sb.WriteString(" lang: ")
		sb.WriteString(strconv.Quote(x.Lang))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Value_LangString) String() string {
	return x.MarshalProtoText()
}
func (x *Value_Timestamp) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Timestamp { ")
	if x.Seconds != 0 {
		sb.WriteString(" seconds: ")
		sb.WriteString(strconv.FormatInt(int64(x.Seconds), 10))
	}
	if x.Nanos != 0 {
		sb.WriteString(" nanos: ")
		sb.WriteString(strconv.FormatInt(int64(x.Nanos), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Value_Timestamp) String() string {
	return x.MarshalProtoText()
}
func (x *Value) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Value { ")
	switch body := x.Value.(type) {
	case *Value_Raw:
		if len(body.Raw) > 0 {
			sb.WriteString(" raw: ")
			sb.WriteString("\"")
			sb.WriteString(base64.StdEncoding.EncodeToString(body.Raw))
			sb.WriteString("\"")
		}
	case *Value_Str:
		if body.Str != "" {
			sb.WriteString(" str: ")
			sb.WriteString(strconv.Quote(body.Str))
		}
	case *Value_Iri:
		if body.Iri != "" {
			sb.WriteString(" iri: ")
			sb.WriteString(strconv.Quote(body.Iri))
		}
	case *Value_Bnode:
		if body.Bnode != "" {
			sb.WriteString(" bnode: ")
			sb.WriteString(strconv.Quote(body.Bnode))
		}
	case *Value_TypedStr:
		if body.TypedStr != nil {
			sb.WriteString(" typed_str: ")
			sb.WriteString(body.TypedStr.MarshalProtoText())
		}
	case *Value_LangStr:
		if body.LangStr != nil {
			sb.WriteString(" lang_str: ")
			sb.WriteString(body.LangStr.MarshalProtoText())
		}
	case *Value_Int:
		if body.Int != 0 {
			sb.WriteString(" int: ")
			sb.WriteString(strconv.FormatInt(int64(body.Int), 10))
		}
	case *Value_Float:
		if body.Float != 0 {
			sb.WriteString(" float: ")
			sb.WriteString(strconv.FormatFloat(body.Float, 'g', -1, 64))
		}
	case *Value_Boolean:
		if body.Boolean {
			sb.WriteString(" boolean: ")
			sb.WriteString(strconv.FormatBool(body.Boolean))
		}
	case *Value_Time:
		if body.Time != nil {
			sb.WriteString(" time: ")
			sb.WriteString(body.Time.MarshalProtoText())
		}
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Value) String() string {
	return x.MarshalProtoText()
}
func (x *Header) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Header { ")
	if x.Full {
		sb.WriteString(" full: ")
		sb.WriteString(strconv.FormatBool(x.Full))
	}
	if x.NotStrict {
		sb.WriteString(" not_strict: ")
		sb.WriteString(strconv.FormatBool(x.NotStrict))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Header) String() string {
	return x.MarshalProtoText()
}
func (m *Quad) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Object = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubjectValue == nil {
				m.SubjectValue = &Value{}
			}
			if err := m.SubjectValue.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PredicateValue == nil {
				m.PredicateValue = &Value{}
			}
			if err := m.PredicateValue.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectValue == nil {
				m.ObjectValue = &Value{}
			}
			if err := m.ObjectValue.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelValue == nil {
				m.LabelValue = &Value{}
			}
			if err := m.LabelValue.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WireQuad) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WireQuad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WireQuad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &Value{}
			}
			if err := m.Subject.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Predicate == nil {
				m.Predicate = &Value{}
			}
			if err := m.Predicate.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Value{}
			}
			if err := m.Object.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &Value{}
			}
			if err := m.Label.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WireQuadRaw) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WireQuadRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WireQuadRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = append(m.Subject[:0], dAtA[iNdEx:postIndex]...)
			if m.Subject == nil {
				m.Subject = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicate = append(m.Predicate[:0], dAtA[iNdEx:postIndex]...)
			if m.Predicate == nil {
				m.Predicate = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Object = append(m.Object[:0], dAtA[iNdEx:postIndex]...)
			if m.Object == nil {
				m.Object = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = append(m.Label[:0], dAtA[iNdEx:postIndex]...)
			if m.Label == nil {
				m.Label = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrictQuad_Ref) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrictQuad_Ref: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrictQuad_Ref: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BnodeLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &StrictQuad_Ref_BnodeLabel{BnodeLabel: string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &StrictQuad_Ref_Iri{Iri: string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrictQuad) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrictQuad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrictQuad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &StrictQuad_Ref{}
			}
			if err := m.Subject.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Predicate == nil {
				m.Predicate = &StrictQuad_Ref{}
			}
			if err := m.Predicate.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Value{}
			}
			if err := m.Object.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &StrictQuad_Ref{}
			}
			if err := m.Label.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrictQuadRaw) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrictQuadRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrictQuadRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = append(m.Subject[:0], dAtA[iNdEx:postIndex]...)
			if m.Subject == nil {
				m.Subject = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicate = append(m.Predicate[:0], dAtA[iNdEx:postIndex]...)
			if m.Predicate == nil {
				m.Predicate = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Object = append(m.Object[:0], dAtA[iNdEx:postIndex]...)
			if m.Object == nil {
				m.Object = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = append(m.Label[:0], dAtA[iNdEx:postIndex]...)
			if m.Label == nil {
				m.Label = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value_TypedString) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value_TypedString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value_TypedString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value_LangString) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value_LangString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value_LangString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value_Timestamp) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value_Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value_Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanos", wireType)
			}
			m.Nanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &Value_Raw{Raw: v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Value_Str{Str: string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Value_Iri{Iri: string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bnode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Value_Bnode{Bnode: string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypedStr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Value.(*Value_TypedStr); ok {
				if err := oneof.TypedStr.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &Value_TypedString{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Value = &Value_TypedStr{TypedStr: v}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangStr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Value.(*Value_LangStr); ok {
				if err := oneof.LangStr.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &Value_LangString{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Value = &Value_LangStr{LangStr: v}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Value_Int{Int: v}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &Value_Float{Float: float64(math.Float64frombits(v))}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boolean", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &Value_Boolean{Boolean: b}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Value.(*Value_Time); ok {
				if err := oneof.Time.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &Value_Timestamp{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Value = &Value_Time{Time: v}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Full", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Full = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotStrict", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotStrict = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
