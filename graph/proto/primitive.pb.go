// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.6.1
// source: github.com/cayleygraph/cayley/graph/proto/primitive.proto

package proto

import (
	base64 "encoding/base64"
	fmt "fmt"
	io "io"
	strconv "strconv"
	strings "strings"

	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
)

// Copyright 2016 The Cayley Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

type PrimitiveType int32

const (
	PrimitiveType_LINK      PrimitiveType = 0
	PrimitiveType_IRI       PrimitiveType = 1
	PrimitiveType_STRING    PrimitiveType = 2
	PrimitiveType_BNODE     PrimitiveType = 3
	PrimitiveType_TYPED_STR PrimitiveType = 4
	PrimitiveType_LANG_STR  PrimitiveType = 5
	PrimitiveType_INT       PrimitiveType = 6
	PrimitiveType_FLOAT     PrimitiveType = 7
	PrimitiveType_BOOL      PrimitiveType = 8
	PrimitiveType_TIMESTAMP PrimitiveType = 9
)

// Enum value maps for PrimitiveType.
var (
	PrimitiveType_name = map[int32]string{
		0: "LINK",
		1: "IRI",
		2: "STRING",
		3: "BNODE",
		4: "TYPED_STR",
		5: "LANG_STR",
		6: "INT",
		7: "FLOAT",
		8: "BOOL",
		9: "TIMESTAMP",
	}
	PrimitiveType_value = map[string]int32{
		"LINK":      0,
		"IRI":       1,
		"STRING":    2,
		"BNODE":     3,
		"TYPED_STR": 4,
		"LANG_STR":  5,
		"INT":       6,
		"FLOAT":     7,
		"BOOL":      8,
		"TIMESTAMP": 9,
	}
)

func (x PrimitiveType) Enum() *PrimitiveType {
	p := new(PrimitiveType)
	*p = x
	return p
}

func (x PrimitiveType) String() string {
	name, valid := PrimitiveType_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type Primitive struct {
	unknownFields []byte
	ID            uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Subject       uint64 `protobuf:"varint,2,opt,name=Subject,proto3" json:"Subject,omitempty"`
	Predicate     uint64 `protobuf:"varint,3,opt,name=Predicate,proto3" json:"Predicate,omitempty"`
	Object        uint64 `protobuf:"varint,4,opt,name=Object,proto3" json:"Object,omitempty"`
	Label         uint64 `protobuf:"varint,5,opt,name=Label,proto3" json:"Label,omitempty"`
	Replaces      uint64 `protobuf:"varint,6,opt,name=Replaces,proto3" json:"Replaces,omitempty"`
	Value         []byte `protobuf:"bytes,8,opt,name=Value,proto3" json:"Value,omitempty"`
	Deleted       bool   `protobuf:"varint,9,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
}

func (x *Primitive) Reset() {
	*x = Primitive{}
}

func (*Primitive) ProtoMessage() {}

func (x *Primitive) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Primitive) GetSubject() uint64 {
	if x != nil {
		return x.Subject
	}
	return 0
}

func (x *Primitive) GetPredicate() uint64 {
	if x != nil {
		return x.Predicate
	}
	return 0
}

func (x *Primitive) GetObject() uint64 {
	if x != nil {
		return x.Object
	}
	return 0
}

func (x *Primitive) GetLabel() uint64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *Primitive) GetReplaces() uint64 {
	if x != nil {
		return x.Replaces
	}
	return 0
}

func (x *Primitive) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Primitive) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (m *Primitive) CloneVT() *Primitive {
	if m == nil {
		return (*Primitive)(nil)
	}
	r := new(Primitive)
	r.ID = m.ID
	r.Subject = m.Subject
	r.Predicate = m.Predicate
	r.Object = m.Object
	r.Label = m.Label
	r.Replaces = m.Replaces
	r.Deleted = m.Deleted
	if rhs := m.Value; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Value = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Primitive) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Primitive) EqualVT(that *Primitive) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ID != that.ID {
		return false
	}
	if this.Subject != that.Subject {
		return false
	}
	if this.Predicate != that.Predicate {
		return false
	}
	if this.Object != that.Object {
		return false
	}
	if this.Label != that.Label {
		return false
	}
	if this.Replaces != that.Replaces {
		return false
	}
	if string(this.Value) != string(that.Value) {
		return false
	}
	if this.Deleted != that.Deleted {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Primitive) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Primitive)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the PrimitiveType to JSON.
func (x PrimitiveType) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), PrimitiveType_name)
}

// MarshalText marshals the PrimitiveType to text.
func (x PrimitiveType) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), PrimitiveType_name)), nil
}

// MarshalJSON marshals the PrimitiveType to JSON.
func (x PrimitiveType) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the PrimitiveType from JSON.
func (x *PrimitiveType) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(PrimitiveType_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read PrimitiveType enum: %v", err)
		return
	}
	*x = PrimitiveType(v)
}

// UnmarshalText unmarshals the PrimitiveType from text.
func (x *PrimitiveType) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), PrimitiveType_value)
	if err != nil {
		return err
	}
	*x = PrimitiveType(i)
	return nil
}

// UnmarshalJSON unmarshals the PrimitiveType from JSON.
func (x *PrimitiveType) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Primitive message to JSON.
func (x *Primitive) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ID != 0 || s.HasField("ID") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ID")
		s.WriteUint64(x.ID)
	}
	if x.Subject != 0 || s.HasField("Subject") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("Subject")
		s.WriteUint64(x.Subject)
	}
	if x.Predicate != 0 || s.HasField("Predicate") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("Predicate")
		s.WriteUint64(x.Predicate)
	}
	if x.Object != 0 || s.HasField("Object") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("Object")
		s.WriteUint64(x.Object)
	}
	if x.Label != 0 || s.HasField("Label") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("Label")
		s.WriteUint64(x.Label)
	}
	if x.Replaces != 0 || s.HasField("Replaces") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("Replaces")
		s.WriteUint64(x.Replaces)
	}
	if len(x.Value) > 0 || s.HasField("Value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("Value")
		s.WriteBytes(x.Value)
	}
	if x.Deleted || s.HasField("Deleted") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("Deleted")
		s.WriteBool(x.Deleted)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Primitive to JSON.
func (x *Primitive) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Primitive message from JSON.
func (x *Primitive) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "ID":
			s.AddField("ID")
			x.ID = s.ReadUint64()
		case "Subject":
			s.AddField("Subject")
			x.Subject = s.ReadUint64()
		case "Predicate":
			s.AddField("Predicate")
			x.Predicate = s.ReadUint64()
		case "Object":
			s.AddField("Object")
			x.Object = s.ReadUint64()
		case "Label":
			s.AddField("Label")
			x.Label = s.ReadUint64()
		case "Replaces":
			s.AddField("Replaces")
			x.Replaces = s.ReadUint64()
		case "Value":
			s.AddField("Value")
			x.Value = s.ReadBytes()
		case "Deleted":
			s.AddField("Deleted")
			x.Deleted = s.ReadBool()
		}
	})
}

// UnmarshalJSON unmarshals the Primitive from JSON.
func (x *Primitive) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Primitive) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Primitive) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Primitive) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x42
	}
	if m.Replaces != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Replaces))
		i--
		dAtA[i] = 0x30
	}
	if m.Label != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Label))
		i--
		dAtA[i] = 0x28
	}
	if m.Object != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Object))
		i--
		dAtA[i] = 0x20
	}
	if m.Predicate != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Predicate))
		i--
		dAtA[i] = 0x18
	}
	if m.Subject != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Primitive) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.ID))
	}
	if m.Subject != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Subject))
	}
	if m.Predicate != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Predicate))
	}
	if m.Object != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Object))
	}
	if m.Label != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Label))
	}
	if m.Replaces != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Replaces))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	n += len(m.unknownFields)
	return n
}

func (x PrimitiveType) MarshalProtoText() string {
	return x.String()
}
func (x *Primitive) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Primitive { ")
	if x.ID != 0 {
		sb.WriteString(" ID: ")
		sb.WriteString(strconv.FormatUint(uint64(x.ID), 10))
	}
	if x.Subject != 0 {
		sb.WriteString(" Subject: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Subject), 10))
	}
	if x.Predicate != 0 {
		sb.WriteString(" Predicate: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Predicate), 10))
	}
	if x.Object != 0 {
		sb.WriteString(" Object: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Object), 10))
	}
	if x.Label != 0 {
		sb.WriteString(" Label: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Label), 10))
	}
	if x.Replaces != 0 {
		sb.WriteString(" Replaces: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Replaces), 10))
	}
	if len(x.Value) > 0 {
		sb.WriteString(" Value: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Value))
		sb.WriteString("\"")
	}
	if x.Deleted {
		sb.WriteString(" Deleted: ")
		sb.WriteString(strconv.FormatBool(x.Deleted))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Primitive) String() string {
	return x.MarshalProtoText()
}
func (m *Primitive) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Primitive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Primitive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			m.Predicate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Predicate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			m.Object = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Object |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			m.Label = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Label |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replaces", wireType)
			}
			m.Replaces = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replaces |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
